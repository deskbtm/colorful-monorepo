diff --git a/assets/select_light.svg b/assets/select_light.svg
index 9312ddd..2db911d 100644
--- a/assets/select_light.svg
+++ b/assets/select_light.svg
@@ -1 +1,3 @@
-<svg width="24" height="24" fill="none" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M6.78 4.78a.75.75 0 0 0-1.06-1.06L3.75 5.69l-.47-.47a.75.75 0 0 0-1.06 1.06l1 1a.75.75 0 0 0 1.06 0l2.5-2.5Zm2.97 13.227h11.5a.75.75 0 0 1 .102 1.493l-.102.007H9.75a.75.75 0 0 1-.102-1.493l.102-.007Zm0-6.507h11.5a.75.75 0 0 1 .102 1.493L21.25 13H9.75a.75.75 0 0 1-.102-1.493l.102-.007Zm0-6.5h11.5a.75.75 0 0 1 .102 1.493l-.102.007H9.75a.75.75 0 0 1-.102-1.493L9.75 5ZM6.78 16.72a.75.75 0 0 1 0 1.06l-2.5 2.5a.75.75 0 0 1-1.06 0l-1-1a.75.75 0 1 1 1.06-1.06l.47.47 1.97-1.97a.75.75 0 0 1 1.06 0Z" fill="#1D1D1D"/></svg>
\ No newline at end of file
+<svg width="24" height="24" fill="none" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
+  <path d="M6.78 4.78a.75.75 0 0 0-1.06-1.06L3.75 5.69l-.47-.47a.75.75 0 0 0-1.06 1.06l1 1a.75.75 0 0 0 1.06 0l2.5-2.5Zm2.97 13.227h11.5a.75.75 0 0 1 .102 1.493l-.102.007H9.75a.75.75 0 0 1-.102-1.493l.102-.007Zm0-6.507h11.5a.75.75 0 0 1 .102 1.493L21.25 13H9.75a.75.75 0 0 1-.102-1.493l.102-.007Zm0-6.5h11.5a.75.75 0 0 1 .102 1.493l-.102.007H9.75a.75.75 0 0 1-.102-1.493L9.75 5ZM6.78 16.72a.75.75 0 0 1 0 1.06l-2.5 2.5a.75.75 0 0 1-1.06 0l-1-1a.75.75 0 1 1 1.06-1.06l.47.47 1.97-1.97a.75.75 0 0 1 1.06 0Z" fill="#1D1D1D" />
+</svg>
\ No newline at end of file
diff --git a/index.js b/index.js
deleted file mode 100644
index a1881fe..0000000
--- a/index.js
+++ /dev/null
@@ -1,18 +0,0 @@
-const glob = require("glob");
-
-glob(
-  "**/*.{js,ts}",
-  {
-    // ignore: [
-    //   "**/dist/*/**",
-    //   "**/build/*/**",
-    //   "**/node_modules/*/**",
-    //   "**/.git/objects/**",
-    //   "**/.git/subtree-cache/**",
-    //   "**/.hg/store/**",
-    // ],
-  },
-  (e, r) => {
-    console.log(r);
-  }
-);
diff --git a/package.json b/package.json
index e61b0ab..3d76f09 100644
--- a/package.json
+++ b/package.json
@@ -1,4 +1,4 @@
-{
+	{
 	"name": "colorful-monorepo",
 	"displayName": "Colorful Monorepo - javascript, typescript, npm, yarn, pnpm, rush, nodejs",
 	"description": "A super amazing monorepo helper",
@@ -47,11 +47,12 @@
 			},
 			{
 				"command": "com.deskbtm.ColorfulMonorepo.npm.run-scripts",
-				"title": "Monorepo: Run Scripts",
-				"icon": {
-					"dark": "./assets/select_dark.svg",
-					"light": "./assets/select_light.svg"
-				}
+				"title": "Monorepo: Run Scripts"
+			},
+			{
+				"command": "com.deskbtm.ColorfulMonorepo.drawer.refresh",
+				"title": "Monorepo Drawer: Refresh",
+				"icon": "$(refresh)"
 			}
 		],
 		"menus": {
@@ -60,6 +61,11 @@
 					"command": "com.deskbtm.ColorfulMonorepo.select",
 					"when": "view == workbench.explorer.fileView",
 					"group": "navigation"
+				},
+				{
+					"command": "com.deskbtm.ColorfulMonorepo.drawer.refresh",
+					"when": "view == drawer",
+					"group": "navigation"
 				}
 			],
 			"view/item/context": [
@@ -171,4 +177,4 @@
 	"dependencies": {
 		"@deskbtm/workspace-tools": "link:workspace-tools"
 	}
-}
+}
\ No newline at end of file
diff --git a/src/drawer/drawer-provider.ts b/src/drawer/drawer-provider.ts
index 06c1344..41fc70d 100644
--- a/src/drawer/drawer-provider.ts
+++ b/src/drawer/drawer-provider.ts
@@ -1,4 +1,10 @@
-import { getExtensionConfig, humanFileList } from "../utils";
+import {
+  getExtensionConfig,
+  getFiles,
+  globAsync,
+  humanFileList,
+  humanFileList1,
+} from "../utils";
 import { FileItem } from "./file-item";
 import { WorkspaceItem } from "./workspace-item";
 import {
@@ -8,29 +14,55 @@ import {
   window,
   TreeItemCollapsibleState,
   EventEmitter,
-  FileSystemWatcher,
   RelativePattern,
   FileType,
+  Uri,
 } from "vscode";
+import { glob } from "glob";
+import minimatch from "minimatch";
+import { readdir, stat } from "fs/promises";
+import { join } from "path";
 
 type DrawerItem = WorkspaceItem | FileItem;
 
 export class DrawerProvider
-  extends EventEmitter<DrawerItem | any>
+  extends EventEmitter<DrawerItem | undefined>
   implements TreeDataProvider<DrawerItem>
 {
-  private fileWatcher!: FileSystemWatcher;
+  private watchers = new Map();
+
+  readonly onDidChangeTreeData = this.event;
 
   constructor(private workspaceRoot: string) {
     super();
     workspace.workspaceFolders?.forEach((folder) => {
-      this.fileWatcher = workspace.createFileSystemWatcher(
-        new RelativePattern(folder.uri, "**​")
-      );
-      this.fileWatcher.onDidChange((e) => this.fire(e));
+      this.#add2Watch(folder.uri);
+    });
+
+    workspace.onDidChangeWorkspaceFolders((e) => {
+      e.added.forEach((e) => {
+        this.#add2Watch(e.uri);
+      });
+
+      e.removed.forEach((e) => {
+        this.watchers.delete(e.uri.fsPath);
+      });
     });
   }
 
+  public refresh(): void {
+    this.fire(undefined);
+  }
+
+  #add2Watch(uri: Uri) {
+    const watcher = workspace.createFileSystemWatcher(
+      new RelativePattern(uri, "**​")
+    );
+
+    this.watchers.set(uri.fsPath, watcher);
+    watcher.onDidChange(() => this.refresh());
+  }
+
   getTreeItem(element: DrawerItem): TreeItem {
     return element;
   }
@@ -41,17 +73,15 @@ export class DrawerProvider
       return Promise.resolve([]);
     }
 
-    return new Promise(async (resolve, reject) => {
-      const folders = workspace.workspaceFolders;
-      if (!folders) {
-        reject([]);
-        return;
-      }
+    const folders = workspace.workspaceFolders ?? [];
 
+    return new Promise(async (resolve, reject) => {
       if (element) {
         const config = getExtensionConfig("files");
         const exclude = config.get<Record<string, boolean>>("exclude");
 
+        const excludeGlobs = [];
+
         const folder = folders.find((v) => v.name === element.label);
 
         if (!folder) {
@@ -59,14 +89,53 @@ export class DrawerProvider
           return;
         }
 
-        const files = await workspace.fs.readDirectory(
+        for (const key in exclude) {
+          if (exclude[key]) {
+            excludeGlobs.push(key);
+          }
+        }
+
+        const folderUri =
+          element.resourceUri ??
+          (folders.find((v) => v.name === element.label)?.uri as Uri);
+
+        const names = await globAsync("*", {
+          ignore: excludeGlobs,
+          dot: true,
+          cwd: folderUri.fsPath,
+          silent: true,
+        });
+
+        const files = await getFiles(folderUri, names);
+
+        const files1 = await workspace.fs.readDirectory(
           element.resourceUri ?? folder.uri
         );
 
-        const fileList = humanFileList(folder.uri, files);
+        // const files = await workspace.fs.readDirectory(folderUri);
+
+        const fileList = humanFileList(files);
+        const fileList1 = humanFileList1(folder.uri, files1);
 
         const items: FileItem[] = [];
 
+        // fileList1.filter((v) => {
+
+        // });
+
+        // console.log(fileList);
+
+        for (let f of fileList1) {
+          const r = minimatch(
+            f.uri.fsPath,
+            "{" + excludeGlobs.join(",") + "}",
+            { dot: true }
+          );
+
+          if (r) {
+          }
+        }
+
         for (const f of fileList) {
           items.push(
             new FileItem(
@@ -78,7 +147,9 @@ export class DrawerProvider
           );
         }
 
-        resolve(items);
+        console.log(items);
+
+        resolve([]);
       } else {
         const items = [];
 
@@ -91,106 +162,5 @@ export class DrawerProvider
         resolve(items);
       }
     });
-
-    // if (element) {
-    //   return Promise.resolve(
-    //     this.getDepsInPackageJson(
-    //       path.join(
-    //         this.workspaceRoot,
-    //         "node_modules",
-    //         element.label,
-    //         "package.json"
-    //       )
-    //     )
-    //   );
-    // } else {
-    //   const packageJsonPath = path.join(this.workspaceRoot, "package.json");
-    //   if (this.pathExists(packageJsonPath)) {
-    //     return Promise.resolve(this.getDepsInPackageJson(packageJsonPath));
-    //   } else {
-    //     window.showInformationMessage("Workspace has no package.json");
-    //     return Promise.resolve([]);
-    //   }
-    // }
   }
-
-  // private getDepsInPackageJson(packageJsonPath: string): DrawerItem[] {
-  //   if (this.pathExists(packageJsonPath)) {
-  //     const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, "utf-8"));
-
-  //     const toDep = (moduleName: string, version: string): DrawerItem => {
-  //       if (
-  //         this.pathExists(
-  //           path.join(this.workspaceRoot, "node_modules", moduleName)
-  //         )
-  //       ) {
-  //         // return new DrawerItem(
-  //         //   moduleName,
-  //         //   version,
-  //         //   TreeItemCollapsibleState.Collapsed
-  //         // );
-  //       } else {
-  //         // return new DrawerItem(
-  //         //   moduleName,
-  //         //   version,
-  //         //   TreeItemCollapsibleState.None
-  //         // );
-  //       }
-  //     };
-
-  //     const deps = packageJson.dependencies
-  //       ? Object.keys(packageJson.dependencies).map((dep) =>
-  //           toDep(dep, packageJson.dependencies[dep])
-  //         )
-  //       : [];
-  //     const devDeps = packageJson.devDependencies
-  //       ? Object.keys(packageJson.devDependencies).map((dep) =>
-  //           toDep(dep, packageJson.devDependencies[dep])
-  //         )
-  //       : [];
-  //     return deps.concat(devDeps);
-  //   } else {
-  //     return [];
-  //   }
-  // }
-
-  // private pathExists(p: string): boolean {
-  //   try {
-  //     fs.accessSync(p);
-  //   } catch (err) {
-  //     return false;
-  //   }
-  //   return true;
-  // }
 }
-
-// class DrawerItem extends TreeItem {
-//   constructor(
-//     public override readonly label: string,
-//     private version: string,
-//     public override readonly collapsibleState: TreeItemCollapsibleState
-//   ) {
-//     super(label, collapsibleState);
-//     this.tooltip = `${this.label}-${this.version}`;
-//     this.description = this.version;
-//   }
-
-//   override iconPath = {
-//     light: path.join(
-//       __filename,
-//       "..",
-//       "..",
-//       "resources",
-//       "light",
-//       "dependency.svg"
-//     ),
-//     dark: path.join(
-//       __filename,
-//       "..",
-//       "..",
-//       "resources",
-//       "dark",
-//       "dependency.svg"
-//     ),
-//   };
-// }
diff --git a/src/extension.ts b/src/extension.ts
index 346afdb..5909c7d 100644
--- a/src/extension.ts
+++ b/src/extension.ts
@@ -32,7 +32,19 @@ export function activate(context: ExtensionContext) {
   const cwd = getExtensionCwd();
 
   if (cwd) {
-    window.registerTreeDataProvider("drawer", new DrawerProvider(cwd));
+    const drawerProvider = new DrawerProvider(cwd);
+    // window.registerTreeDataProvider("drawer", drawerProvider);
+
+    window.createTreeView("drawer", {
+      treeDataProvider: new DrawerProvider(cwd),
+    });
+
+    commands.registerCommand(
+      "com.deskbtm.ColorfulMonorepo.drawer.refresh",
+      () => {
+        drawerProvider.refresh();
+      }
+    );
   }
 
   let selectPackages = commands.registerCommand(
diff --git a/src/utils.ts b/src/utils.ts
index b2c6e67..7bdc1c1 100644
--- a/src/utils.ts
+++ b/src/utils.ts
@@ -1,8 +1,10 @@
 /* eslint-disable @typescript-eslint/naming-convention */
 import { glob } from "glob";
-import { isAbsolute, normalize, relative } from "path";
+import { isAbsolute, join, normalize, relative } from "path";
 import { ConfigurationTarget, FileType, Uri, workspace } from "vscode";
 import { promisify } from "util";
+import { stat } from "fs/promises";
+import { Stats } from "fs";
 
 export const globAsync = promisify(glob);
 
@@ -129,6 +131,40 @@ interface HumanFile {
   uri: Uri;
 }
 
+interface FormattedFile {
+  name: string;
+  uri: Uri;
+  stat: Stats;
+  type: FileType;
+}
+
+export const getFiles = async (base: Uri, names: string[]) => {
+  return Promise.all(
+    names.map(async (n) => {
+      const path = join(base.fsPath, n);
+      const s = await stat(path);
+
+      let type: FileType;
+      if (s.isDirectory()) {
+        type = FileType.Directory;
+      } else if (s.isFile()) {
+        type = FileType.File;
+      } else if (s.isSymbolicLink()) {
+        type = FileType.SymbolicLink;
+      } else {
+        type = FileType.Unknown;
+      }
+
+      return {
+        name: n,
+        uri: Uri.file(path),
+        stat: s,
+        type,
+      };
+    })
+  );
+};
+
 /**
  *
  * convert {@link FileSystem.readDirectory} result readable
@@ -138,6 +174,27 @@ interface HumanFile {
  * @param sortType
  */
 export const humanFileList = (
+  files: FormattedFile[],
+  sortType: SortType = SortType.KIND
+): HumanFile[] => {
+  const fileList: HumanFile[] = [];
+  const folderList: HumanFile[] = [];
+
+  for (const f of files) {
+    if (f.type === FileType.Directory) {
+      folderList.push(f);
+    } else {
+      fileList.push(f);
+    }
+  }
+
+  folderList.sort((p, n) => p.name.localeCompare(n.name));
+  fileList.sort((p, n) => p.name.localeCompare(n.name));
+
+  return folderList.concat(fileList);
+};
+
+export const humanFileList1 = (
   base: Uri,
   files: [string, FileType][],
   sortType: SortType = SortType.KIND
